#!/usr/bin/env python3

"""
tekaim - Simple screenshot uploader using maim and teknik.io
"""

from datetime import datetime
from pathlib import Path
import json
import os
import re
import shutil
import subprocess
import sys
import urllib.request

VERSION = "1.6.0"
GITHUB_URL = 'https://github.com/IvanFon/tekaim'
CONFIG_URL = 'https://raw.githubusercontent.com/IvanFon/tekaim/master/config.json'

def main(argv):
    """main"""
    # check arguments
    if '-h' in argv or '--help' in argv:
        print('tekaim v{} - simple teknik.io image uploader'.format(VERSION))
        print('Run without arguments to capture a selection')
        print('Run with "-f" to capture entire screen')
        print(GITHUB_URL)
        print('Made by Ivan Fonseca\n<3')
        return

    # dev mode
    dev = False
    if '-d' in argv:
        dev = True

    selection = True
    if '-f' in argv:
        selection = False

    # tekaim dircectory
    tekaim_dir = Path.home().joinpath('.tekaim')
    # screenshot directory
    screenshot_dir = tekaim_dir.joinpath('screenshots')
    # history directory
    history_dir = tekaim_dir.joinpath('history')

    # create tekaim directory if it doesn't exist
    tekaim_dir.mkdir(exist_ok=True)
    # create screenshots directory if it doesn't exist
    screenshot_dir.mkdir(exist_ok=True)
    # create history directory if it doesn't exist
    history_dir.mkdir(exist_ok=True)

    config_path = tekaim_dir.joinpath('config.json')

    if dev:
        config_path = Path('config.json')

    # check if config file is missing
    if not config_path.is_file():
        print('Config at {} not found! Downloading it from {}...'.format(config_path, CONFIG_URL))
        # download it
        with urllib.request.urlopen(CONFIG_URL) as res, open(config_path, 'wb') as out:
            shutil.copyfileobj(res, out)
        print('Config downloaded!')

    # load settings file
    with open(config_path, 'r') as config_file:
        config = config_file.read()
    # strip comments
    config = re.sub(r'^\s*//.*$', '', config, flags=re.MULTILINE)
    config = json.loads(config)

    # get filename
    filename = datetime.now().strftime(config['filename'])
    image_filename = filename + config['format']
    history_filename = filename + '.txt'

    if dev:
        print(image_filename)
        print(history_filename)

    # build screenshot command
    screenshot_args = config['screenshot']['args'].replace('${file}', image_filename)
    screenshot_cmd = '{} {}'.format(config['screenshot']['bin'], screenshot_args)
    if selection:
        screenshot_cmd += ' ' + config['screenshot']['optargs']['selection']

    if dev:
        print(screenshot_cmd)

    # build upload command
    upload_args = config['upload']['args'].replace('${file}', image_filename)
    upload_args = upload_args.replace('${host}', config['host'])
    upload_cmd = '{} {}'.format(config['upload']['bin'], upload_args)

    if dev:
        print(upload_cmd)

    # take screenshot
    print('Taking screenshot...')
    subprocess.call(screenshot_cmd, shell=True, cwd=screenshot_dir)

    # upload and capture response
    print('Uploading...')
    out_raw = subprocess.check_output(upload_cmd, shell=True, cwd=screenshot_dir)
    out = json.loads(out_raw)
    url = out['result']['url']
    deletion = '{}/{}'.format(url, out['result']['deletionKey'])

    # print and copy link to clipboard
    clipboard_cmd = config['clipboard']['command'].replace('${url}', url)
    subprocess.call(clipboard_cmd, shell=True)
    print('File uploaded to: {} (copied to clipboard)'.format(url))
    print('Deletion link: {}'.format(deletion))

    # save link
    if config['history']:
        with open(history_dir.joinpath(history_filename), 'w') as f:
            print('Image link: {}'.format(url), file=f)
            print('Deletion link: {}'.format(deletion), file=f)

if __name__ == "__main__":
    main(sys.argv)
